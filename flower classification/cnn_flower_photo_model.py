# -*- coding: utf-8 -*-
"""CNN_Flower_Photo_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PPwqziZHQESorPhE8nZpVt9G43QKB0qo
"""

import tensorflow as tf
from tensorflow.keras.models import load_model
import numpy as np
from tensorflow.keras.utils import image_dataset_from_directory
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/gdrive')

# file directory to the location of the dataset folder
dir = '/content/gdrive/MyDrive/Colab Notebooks/dataset/'

# Load the saved model
model_path = '/content/gdrive/MyDrive/Colab Notebooks/dataset/CNN_Flower_Class_Model.keras'
loaded_model = load_model(model_path)

data_dir = dir + 'flower_photos/'
_size, image_height, image_width = 500, 250, 250

data = image_dataset_from_directory(
    data_dir,
    labels='inferred',  # Automatically infer labels from subdirectory structure
    label_mode='categorical',  # Assuming categorical labels
    batch_size=_size,
    image_size=(image_height, image_width),  # Adjust to your model's input size
    shuffle=False  # Do not shuffle for evaluating in order
)

# Make predictions using the dataset
predictions = loaded_model.predict(data)

# Interpret predictions
predicted_classes = np.argmax(predictions, axis=1)

# Print the predicted classes
print('Predicted Classes:', predicted_classes)

predicted_classes = np.argmax(predictions, axis=1)

# predicted_classes = np.argmax(predictions, axis=1)

# Get actual labels from the dataset
actual_labels = np.concatenate([y.numpy() for x, y in data], axis=0)
actual_labels = np.argmax(actual_labels, axis=1)

# Visualize the first 10 predictions alongside actual labels
for i in range(10):
    image_path = data.file_paths[i]  # Extract file path for the i-th sample
    img = plt.imread(image_path)

    plt.figure(figsize=(8, 8))
    plt.imshow(img)
    plt.title(f"Sample {i + 1}\nPredicted Class: {predicted_classes[i]}, Actual Class: {actual_labels[i]}")
    plt.axis("off")
    plt.show()